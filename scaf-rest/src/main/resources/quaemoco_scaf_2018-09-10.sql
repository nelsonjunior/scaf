# ************************************************************
# Base de Dados: quaemoco_scaf
# ************************************************************

DROP TABLE IF EXISTS TB_GRUPO;
DROP TABLE IF EXISTS TB_CONTATO;
DROP TABLE IF EXISTS TB_TAG;
DROP TABLE IF EXISTS TB_PERIODO;
DROP TABLE IF EXISTS TB_CARTAO_CREDITO;
DROP TABLE IF EXISTS TB_CATEGORIA;
DROP TABLE IF EXISTS TB_AGENDAMENTO;
DROP TABLE IF EXISTS TB_LANCAMENTO;
DROP TABLE IF EXISTS TB_PARCELA;
DROP TABLE IF EXISTS RL_LANCAMENTO_PARCELA;

/*--------------------------------------------------------------
| TB_CONFIGURACAO
--------------------------------------------------------------*/ 
CREATE TABLE TB_CONFIGURACAO (
  COD_CONFIGURACAO      INTEGER      NOT NULL AUTO_INCREMENT,
  NOM_CONFIGURACAO      VARCHAR(100) NOT NULL,
  DES_CONFIGURACAO      VARCHAR(400)     NULL, 
  PRIMARY KEY (COD_CONFIGURACAO) 
) ENGINE=InnoDB DEFAULT CHARSET=latin1; 
/*--------------------------------------------------------------
| TB_GRUPO
--------------------------------------------------------------*/ 
CREATE TABLE TB_GRUPO (
  COD_GRUPO INTEGER      NOT NULL,
  NOM_GRUPO VARCHAR(100) NOT NULL,
  IND_ATIVO INTEGER      NOT NULL DEFAULT 1,
  PRIMARY KEY(COD_GRUPO)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*--------------------------------------------------------------
| TB_CONTATO
--------------------------------------------------------------*/ 
CREATE TABLE TB_CONTATO (
  COD_CONTATO  INTEGER      NOT NULL AUTO_INCREMENT,
  NOM_CONTATO  VARCHAR(250) NOT NULL,
  NOM_ASSUNTO  VARCHAR(250) NOT NULL,
  DES_EMAIL    VARCHAR(100) NOT NULL,
  DES_MENSAGEM TEXT         NOT NULL,
  IND_EXCLUIDO TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY(COD_CONTATO)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*--------------------------------------------------------------
| TB_TAG
--------------------------------------------------------------*/
CREATE TABLE TB_TAG (
  COD_TAG       INTEGER     NOT NULL AUTO_INCREMENT,
  COD_USUARIO   INTEGER     NOT NULL,
  NOM_TAG       VARCHAR(50) NOT NULL,
  DAT_INCLUSAO  TIMESTAMP   NOT NULL DEFAULT CURRENT_TIMESTAMP,
  DAT_ALTERACAO TIMESTAMP       NULL,
  IND_EXCLUIDO  INTEGER     NOT NULL DEFAULT 0,
  PRIMARY KEY(COD_TAG)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*--------------------------------------------------------------
| TB_PERIODO
--------------------------------------------------------------*/
CREATE TABLE TB_PERIODO (
  NUM_PERIODO INTEGER      NOT NULL,
  NOM_PERIODO VARCHAR(100) NOT NULL,
  PRIMARY KEY(NUM_PERIODO)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*--------------------------------------------------------------
| TB_CARTAO_CREDITO
--------------------------------------------------------------*/
CREATE TABLE TB_CARTAO_CREDITO (
  COD_CARTAO_CREDITO INTEGER      NOT NULL AUTO_INCREMENT,
  COD_USUARIO        INTEGER      NOT NULL,
  NOM_BANDEIRA       VARCHAR(50)  NOT NULL,
  NOM_CARTAO_CREDITO VARCHAR(100) NOT NULL,
  NUM_DIA_VENCIMENTO INTEGER      NOT NULL,
  NUM_DIA_FECHAMENTO INTEGER      NOT NULL,
  DAT_INCLUSAO       TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
  DAT_ALTERACAO      TIMESTAMP        NULL,
  IND_ATIVO          INTEGER      NOT NULL DEFAULT 1,
  IND_EXCLUIDO       INTEGER      NOT NULL DEFAULT 0,
  PRIMARY KEY(COD_CARTAO_CREDITO)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*--------------------------------------------------------------
| TB_CATEGORIA
--------------------------------------------------------------*/
CREATE TABLE TB_CATEGORIA (
  COD_CATEGORIA INTEGER      NOT NULL,
  COD_GRUPO     INTEGER      NOT NULL,
  NOM_CATEGORIA VARCHAR(500) NOT NULL,
  IND_ATIVO     INTEGER      NOT NULL DEFAULT 1,
  PRIMARY KEY(COD_CATEGORIA),
  KEY COD_GRUPO(COD_GRUPO) 
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*--------------------------------------------------------------
| TB_AGENDAMENTO
--------------------------------------------------------------*/
CREATE TABLE TB_AGENDAMENTO (
  COD_AGENDAMENTO INTEGER      NOT NULL AUTO_INCREMENT,
  NUM_PERIODO     INTEGER      NOT NULL,
  COD_CATEGORIA   INTEGER      NOT NULL,
  COD_USUARIO     INTEGER      NOT NULL,
  NOM_AGENDAMENTO VARCHAR(250) NOT NULL,
  DES_AGENDAMENTO VARCHAR(4000)    NULL,
  DES_TAGS        VARCHAR(4000)    NULL,
  DAT_INCLUSAO    TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
  DAT_ALTERACAO   TIMESTAMP        NULL,
  DAT_INICIO      DATE         NOT NULL,
  IND_ATIVO       INTEGER      NOT NULL DEFAULT 1,
  IND_EXCLUIDO    INTEGER      NOT NULL DEFAULT 0,
  PRIMARY KEY(COD_AGENDAMENTO),
  KEY COD_CATEGORIA(COD_CATEGORIA),
  KEY NUM_PERIODO(NUM_PERIODO) 
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*--------------------------------------------------------------
| TB_LANCAMENTO
--------------------------------------------------------------*/
CREATE TABLE TB_LANCAMENTO (
  COD_LANCAMENTO     INTEGER       NOT NULL AUTO_INCREMENT,
  COD_PARCELA        INTEGER           NULL,
  COD_AGENDAMENTO    INTEGER           NULL,
  COD_CARTAO_CREDITO INTEGER           NULL,
  COD_CATEGORIA      INTEGER       NOT NULL,
  COD_USUARIO        INTEGER       NOT NULL,
  DES_TAGS           VARCHAR(4000)     NULL,
  VAL_PREVISTO       DECIMAL(26,2) NOT NULL,
  VAL_LANCAMENTO     DECIMAL(26,2) NOT NULL,
  DES_LANCAMENTO     TEXT              NULL,
  DAT_LANCAMENTO     DATE          NOT NULL,
  DAT_INCLUSAO       TIMESTAMP     NOT NULL DEFAULT CURRENT_TIMESTAMP,
  DAT_ALTERACAO      TIMESTAMP         NULL,
  IND_EXCLUIDO       INTEGER       NOT NULL DEFAULT 0,
  PRIMARY KEY(COD_LANCAMENTO),
  KEY COD_CATEGORIA(COD_CATEGORIA),
  KEY COD_CARTAO_CREDITO(COD_CARTAO_CREDITO),
  KEY COD_AGENDAMENTO(COD_AGENDAMENTO),
  KEY COD_PARCELA(COD_PARCELA)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*--------------------------------------------------------------
| TB_PARCELA
--------------------------------------------------------------*/
CREATE TABLE TB_PARCELA (
  COD_PARCELA    INTEGER       NOT NULL AUTO_INCREMENT,
  COD_LANCAMENTO INTEGER       NOT NULL,
  NUM_PARCELA    INTEGER       NOT NULL,
  DAT_PARCELA    DATE          NOT NULL,
  VAL_PARCELA    DECIMAL(26,2) NOT NULL,
  PRIMARY KEY(COD_PARCELA),
  KEY COD_LANCAMENTO(COD_LANCAMENTO) 
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*--------------------------------------------------------------
| RL_LANCAMENTO_PARCELA
--------------------------------------------------------------*/
CREATE TABLE RL_LANCAMENTO_PARCELA (
  COD_PARCELA    INTEGER NOT NULL,
  COD_LANCAMENTO INTEGER NOT NULL,
  PRIMARY KEY(COD_PARCELA, COD_LANCAMENTO),
  KEY COD_LANCAMENTO(COD_LANCAMENTO),
  KEY COD_PARCELA(COD_PARCELA) 
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*--------------------------------------------------------------
| FK'S
--------------------------------------------------------------*/

ALTER TABLE TB_CATEGORIA DROP FOREIGN KEY FK_CATEGORIA_GRUPO ;
ALTER TABLE TB_AGENDAMENTO DROP FOREIGN KEY FK_AGENDAMENTO_PERIODO;
ALTER TABLE TB_AGENDAMENTO DROP FOREIGN KEY FK_AGENDAMENTO_CATEGORIA;
ALTER TABLE TB_LANCAMENTO DROP FOREIGN KEY FK_LANCAMENTO_CATEGORIA ;
ALTER TABLE TB_LANCAMENTO DROP FOREIGN KEY FK_LANCAMENTO_CARTAO_CREDITO ;
ALTER TABLE TB_LANCAMENTO DROP FOREIGN KEY FK_LANCAMENTO_AGENDAMENTO;
ALTER TABLE TB_LANCAMENTO DROP FOREIGN KEY FK_LANCAMENTO_PARCELA;
ALTER TABLE TB_PARCELA DROP FOREIGN KEY FK_PARCELA_LANCAMENTO ;
ALTER TABLE RL_LANCAMENTO_PARCELA DROP FOREIGN KEY FK_LANCAMENTO_PARCELA_PARCELA ;
ALTER TABLE RL_LANCAMENTO_PARCELA DROP FOREIGN KEY FK_LANCAMENTO_PARCELA_LANCAMENTO ;






ALTER TABLE TB_CATEGORIA ADD CONSTRAINT FK_CATEGORIA_GRUPO FOREIGN KEY (COD_GRUPO) REFERENCES TB_GRUPO (COD_GRUPO);
ALTER TABLE TB_AGENDAMENTO ADD CONSTRAINT FK_AGENDAMENTO_PERIODO FOREIGN KEY (NUM_PERIODO) REFERENCES TB_PERIODO (NUM_PERIODO);
ALTER TABLE TB_AGENDAMENTO ADD CONSTRAINT FK_AGENDAMENTO_CATEGORIA FOREIGN KEY (COD_CATEGORIA) REFERENCES TB_CATEGORIA (COD_CATEGORIA);
ALTER TABLE TB_LANCAMENTO ADD CONSTRAINT FK_LANCAMENTO_CATEGORIA FOREIGN KEY (COD_CATEGORIA) REFERENCES TB_CATEGORIA (COD_CATEGORIA);
ALTER TABLE TB_LANCAMENTO ADD CONSTRAINT FK_LANCAMENTO_CARTAO_CREDITO FOREIGN KEY (COD_CARTAO_CREDITO) REFERENCES TB_CARTAO_CREDITO (COD_CARTAO_CREDITO);
ALTER TABLE TB_LANCAMENTO ADD CONSTRAINT FK_LANCAMENTO_AGENDAMENTO FOREIGN KEY (COD_AGENDAMENTO) REFERENCES TB_AGENDAMENTO (COD_AGENDAMENTO);
ALTER TABLE TB_LANCAMENTO ADD CONSTRAINT FK_LANCAMENTO_PARCELA FOREIGN KEY (COD_PARCELA) REFERENCES TB_PARCELA (COD_PARCELA);
ALTER TABLE TB_PARCELA ADD CONSTRAINT FK_PARCELA_LANCAMENTO FOREIGN KEY (COD_LANCAMENTO) REFERENCES TB_LANCAMENTO (COD_LANCAMENTO);
ALTER TABLE RL_LANCAMENTO_PARCELA ADD CONSTRAINT FK_LANCAMENTO_PARCELA_PARCELA FOREIGN KEY (COD_PARCELA) REFERENCES TB_PARCELA (COD_PARCELA);
ALTER TABLE RL_LANCAMENTO_PARCELA ADD CONSTRAINT FK_LANCAMENTO_PARCELA_LANCAMENTO FOREIGN KEY (COD_LANCAMENTO) REFERENCES TB_LANCAMENTO (COD_LANCAMENTO);




/*--------------------------------------------------------------
| VW_FATURAS_DATAS
--------------------------------------------------------------*/ 
create or replace view VW_FATURAS_DATAS AS

SELECT F.COD_USUARIO, 
        F.COD_CARTAO_CREDITO,
        F.DAT_FATURA, 
        L.DAT_REFERENCIA ,  
        L.VAL_LANCAMENTO  
 FROM (  
	 SELECT COD_CARTAO_CREDITO,    
	        COD_USUARIO,  
	        STR_TO_DATE(CONCAT(DATE_FORMAT((CURDATE() + INTERVAL -(2) MONTH),'%Y-%m-'), CONCAT((CASE WHEN NUM_DIA_VENCIMENTO < 10 THEN '0' ELSE '' END), NUM_DIA_VENCIMENTO) ), '%Y-%m-%d')  as DAT_FATURA  
	 FROM  TB_CARTAO_CREDITO     
	    
	 UNION ALL 
	 SELECT COD_CARTAO_CREDITO,    
	        COD_USUARIO,  
	        STR_TO_DATE(CONCAT(DATE_FORMAT((CURDATE() + INTERVAL -(1) MONTH),'%Y-%m-'), CONCAT((CASE WHEN NUM_DIA_VENCIMENTO < 10 THEN '0' ELSE '' END), NUM_DIA_VENCIMENTO) ), '%Y-%m-%d')  as DAT_FATURA  
	 FROM  TB_CARTAO_CREDITO     
	    
	 UNION ALL 
	 SELECT COD_CARTAO_CREDITO,   
	        COD_USUARIO,  
	        STR_TO_DATE(CONCAT(DATE_FORMAT(CURDATE() ,'%Y-%m-'), CONCAT((CASE WHEN NUM_DIA_VENCIMENTO < 10 THEN '0' ELSE '' END), NUM_DIA_VENCIMENTO) ), '%Y-%m-%d')  as DAT_FATURA  
	 FROM  TB_CARTAO_CREDITO     
	
	 UNION ALL 
	 SELECT COD_CARTAO_CREDITO,   
	        COD_USUARIO,  
	        STR_TO_DATE(CONCAT(DATE_FORMAT((CURDATE() + INTERVAL +(1) MONTH),'%Y-%m-'), CONCAT((CASE WHEN NUM_DIA_VENCIMENTO < 10 THEN '0' ELSE '' END), NUM_DIA_VENCIMENTO) ), '%Y-%m-%d')  as DAT_FATURA  
	 FROM  TB_CARTAO_CREDITO     
 ) as F  

 LEFT JOIN TB_LANCAMENTO L   
 	ON  L.COD_CARTAO_CREDITO = F.COD_CARTAO_CREDITO    
 	AND L.DAT_FATURA         = F.DAT_FATURA   
 	AND L.COD_CATEGORIA      = 48  
    AND l.IND_EXCLUIDO       = 0 
 
    
/*--------------------------------------------------------------
| VW_RELATORIO
--------------------------------------------------------------*/ 
CREATE OR REPLACE VIEW VW_RELATORIO AS
     
SELECT LANCAMENTO.COD_USUARIO
     , LANCAMENTO.COD_LANCAMENTO
     , LANCAMENTO.DAT_REFERENCIA
     , LANCAMENTO.DAT_LANCAMENTO
     , DATE_FORMAT(LANCAMENTO.DAT_REFERENCIA,'%Y/%m') AS ANO_MES
     , (CASE WHEN LANCAMENTO.COD_CATEGORIA = 63 THEN LANCAMENTO.VAL_PREVISTO ELSE LANCAMENTO.VAL_LANCAMENTO END) AS VAL_PREVISTO
     , LANCAMENTO.VAL_LANCAMENTO
     , LANCAMENTO.DES_TAGS
     
     , CATEGORIA.COD_CATEGORIA
     , CATEGORIA.NOM_CATEGORIA
     , GRUPO.COD_GRUPO
     , GRUPO.NOM_GRUPO
     
     , PARCELA.COD_LANCAMENTO          AS COD_LANCAMENTO_PARCELA
     , PARCELA.COD_PARCELA
     , PARCELA.NUM_PARCELA
     , LANCAMENTO_PARCELA.DES_TAGS     AS DES_TAGS_PARCELA
     
     , CATEGORIA_PARCELA.COD_CATEGORIA AS COD_CATEGORIA_PARCELA
     , CATEGORIA_PARCELA.NOM_CATEGORIA AS NOM_CATEGORIA_PARCELA
     , GRUPO_PARCELA.COD_GRUPO         AS COD_GRUPO_PARCELA
     , GRUPO_PARCELA.NOM_GRUPO         AS NOM_GRUPO_PARCELA
     
     , AGENDAMENTO.COD_AGENDAMENTO
     , AGENDAMENTO.NOM_AGENDAMENTO
     
     , CARTAO_CREDITO.COD_CARTAO_CREDITO
     , CONCAT(CARTAO_CREDITO.NOM_BANDEIRA, ' - ', CARTAO_CREDITO.NOM_CARTAO_CREDITO) AS NOM_CARTAO_CREDITO
     
     
     , (CASE WHEN LANCAMENTO.COD_AGENDAMENTO IS NOT NULL THEN 1                  -- 1 Pagamentos Agendados
	         WHEN LANCAMENTO.COD_PARCELA     IS NOT NULL THEN 2                  -- 2 Parcelas
	         WHEN GRUPO.COD_GRUPO <> 9 AND LANCAMENTO.COD_CATEGORIA <> 48 THEN 3 -- 3 Despesas Gerais
	         WHEN GRUPO.COD_GRUPO = 9 THEN 4                                     -- 4 Receitas
	         WHEN LANCAMENTO.COD_CATEGORIA = 48 THEN 5                           -- 5 Faturas
	         ELSE 3 end                                                          -- 3 Despesas Gerais
        ) AS COD_TIPO

FROM TB_LANCAMENTO LANCAMENTO

	INNER JOIN TB_CATEGORIA CATEGORIA ON CATEGORIA.COD_CATEGORIA = LANCAMENTO.COD_CATEGORIA
	
	INNER JOIN TB_GRUPO GRUPO ON GRUPO.COD_GRUPO = CATEGORIA.COD_GRUPO
	
	LEFT JOIN TB_AGENDAMENTO AGENDAMENTO ON AGENDAMENTO.COD_AGENDAMENTO = LANCAMENTO.COD_AGENDAMENTO
	
	LEFT JOIN TB_PARCELA PARCELA ON PARCELA.COD_PARCELA = LANCAMENTO.COD_PARCELA
	
	LEFT JOIN TB_LANCAMENTO LANCAMENTO_PARCELA ON LANCAMENTO_PARCELA.COD_LANCAMENTO = PARCELA.COD_LANCAMENTO
	
	LEFT JOIN TB_CATEGORIA CATEGORIA_PARCELA ON CATEGORIA_PARCELA.COD_CATEGORIA = LANCAMENTO_PARCELA.COD_CATEGORIA
	
	LEFT JOIN TB_GRUPO GRUPO_PARCELA ON GRUPO_PARCELA.COD_GRUPO = CATEGORIA_PARCELA.COD_GRUPO
	
	LEFT JOIN TB_CARTAO_CREDITO CARTAO_CREDITO ON CARTAO_CREDITO.COD_CARTAO_CREDITO = LANCAMENTO.COD_CARTAO_CREDITO

WHERE LANCAMENTO.DAT_REFERENCIA >= CAST(DATE_FORMAT((CURDATE() + INTERVAL -(12) MONTH),'%Y-%m-01') AS DATE) 
AND LANCAMENTO.IND_EXCLUIDO = 0
AND LANCAMENTO.COD_TIPO_PAGAMENTO = 1
ORDER BY ANO_MES 
        ,(CASE WHEN LANCAMENTO.COD_PARCELA IS NOT NULL THEN GRUPO_PARCELA.NOM_GRUPO ELSE GRUPO.NOM_GRUPO END)
        ,(CASE WHEN LANCAMENTO.COD_PARCELA IS NOT NULL THEN CATEGORIA_PARCELA.NOM_CATEGORIA ELSE CATEGORIA.NOM_CATEGORIA END)
        , LANCAMENTO.DAT_REFERENCIA
;
	
	
/*--------------------------------------------------------------
| VW_ULTIMAS_ATIVIDADES
--------------------------------------------------------------*/ 
CREATE OR REPLACE VIEW VW_ULTIMAS_ATIVIDADES AS

SELECT LANCAMENTO.COD_USUARIO
     , DATE_FORMAT(LANCAMENTO.DAT_REFERENCIA,'%Y/%m') AS ANO_MES
     , LANCAMENTO.DAT_REFERENCIA 
     , LANCAMENTO.DAT_LANCAMENTO 
     , TIMESTAMPDIFF(DAY,LANCAMENTO.DAT_LANCAMENTO, NOW()) AS NUM_DIAS
     , TIMESTAMPDIFF(HOUR,LANCAMENTO.DAT_LANCAMENTO, NOW()) AS NUM_HORAS
     , TIMESTAMPDIFF(MINUTE,LANCAMENTO.DAT_LANCAMENTO, NOW()) AS NUM_MINUTOS
     ,(CASE WHEN LANCAMENTO.COD_CARTAO_CREDITO IS NOT NULL AND LANCAMENTO.COD_CATEGORIA <> 48 THEN LANCAMENTO.VAL_PREVISTO ELSE LANCAMENTO.VAL_LANCAMENTO END) AS VAL_LANCAMENTO
     
     
     ,CASE WHEN LANCAMENTO.COD_AGENDAMENTO IS NOT NULL 
     			THEN CONCAT(CATEGORIA.NOM_CATEGORIA, ' (', AGENDAMENTO.NOM_AGENDAMENTO,')')
           WHEN LANCAMENTO.COD_PARCELA IS NOT NULL 
           		THEN CONCAT('PARCELA N ', PARCELA.NUM_PARCELA,' (', CATEGORIA_PARCELA.NOM_CATEGORIA, ')') 
           WHEN LANCAMENTO.COD_CARTAO_CREDITO IS NOT NULL AND LANCAMENTO.COD_CATEGORIA = 48 
           		THEN CONCAT(CATEGORIA.NOM_CATEGORIA, '(', CARTAO_CREDITO.NOM_BANDEIRA, ' - ', CARTAO_CREDITO.NOM_CARTAO_CREDITO, ')')
           ELSE CATEGORIA.NOM_CATEGORIA END
     AS DES_CATEGORIA
   
FROM TB_LANCAMENTO LANCAMENTO 

	INNER JOIN TB_CATEGORIA CATEGORIA ON CATEGORIA.COD_CATEGORIA = LANCAMENTO.COD_CATEGORIA 
	
	LEFT JOIN TB_AGENDAMENTO AGENDAMENTO ON AGENDAMENTO.COD_AGENDAMENTO = LANCAMENTO.COD_AGENDAMENTO 
	
	LEFT JOIN TB_CARTAO_CREDITO CARTAO_CREDITO ON CARTAO_CREDITO.COD_CARTAO_CREDITO = LANCAMENTO.COD_CARTAO_CREDITO 
	
	LEFT JOIN TB_PARCELA PARCELA ON PARCELA.COD_PARCELA = LANCAMENTO.COD_PARCELA 
	
	LEFT JOIN TB_LANCAMENTO LANCAMENTO_PARCELA ON LANCAMENTO_PARCELA.COD_LANCAMENTO = PARCELA.COD_LANCAMENTO
	
	LEFT JOIN TB_CATEGORIA CATEGORIA_PARCELA ON CATEGORIA_PARCELA.COD_CATEGORIA = LANCAMENTO_PARCELA.COD_CATEGORIA

ORDER BY ANO_MES, LANCAMENTO.DAT_LANCAMENTO, DES_CATEGORIA;


/*--------------------------------------------------------------
| VW_MEDIA_AGENDAMENTOS
--------------------------------------------------------------*/
CREATE OR REPLACE VIEW VW_MEDIA_AGENDAMENTOS AS 

SELECT COD_AGENDAMENTO
      ,COUNT(0) AS NUM_QTD
      ,SUM(VAL_LANCAMENTO) AS VAL_TOTAL
      ,ROUND((SUM(VAL_LANCAMENTO) / COUNT(0)),2) AS VAL_MEDIA

FROM TB_LANCAMENTO

WHERE COD_AGENDAMENTO IS NOT NULL 
AND DAT_REFERENCIA BETWEEN CAST(DATE_FORMAT((CURDATE() + INTERVAL -(3) MONTH),'%Y-%m-01') AS DATE)
AND CAST(DATE_FORMAT(CURDATE(),'%Y-%m-01') AS DATE)

GROUP BY COD_AGENDAMENTO

;

/*--------------------------------------------------------------
| VW_AGENDAMENTOS
--------------------------------------------------------------*/
CREATE OR REPLACE VIEW VW_AGENDAMENTOS AS 

SELECT AGENDAMENTO.COD_USUARIO 
     , PERIODO.NOM_PERIODO
     , AGENDAMENTO.COD_AGENDAMENTO 
     , AGENDAMENTO.NOM_AGENDAMENTO 
     , LANCAMENTO.DAT_REFERENCIA AS DAT_PAGAMENTO
     , LANCAMENTO.VAL_LANCAMENTO AS VAL_PAGO
     , CATEGORIA.COD_CATEGORIA AS COD_CATEGORIA
     , concat(CATEGORIA.NOM_CATEGORIA, ' (', AGENDAMENTO.NOM_AGENDAMENTO, ')') AS DES_CATEGORIA
     , (case when isnull(VW.VAL_MEDIA) then 0.00 else VW.VAL_MEDIA end) AS VAL_PREVISTO
   
     , (AGENDAMENTO.DAT_INICIO + interval (PERIODO.NUM_PERIODO * round((period_diff(date_format(curdate(),'%Y%m'),date_format(AGENDAMENTO.DAT_INICIO,'%Y%m')) / PERIODO.NUM_PERIODO),0)) month) AS DAT_PREVISTA
   
     ,timestampdiff(DAY,now(),(AGENDAMENTO.DAT_INICIO + interval (PERIODO.NUM_PERIODO * round((period_diff(date_format(curdate(),'%Y%m'),date_format(AGENDAMENTO.DAT_INICIO,'%Y%m')) / PERIODO.NUM_PERIODO),0)) month)) AS DIAS
   
   
FROM TB_AGENDAMENTO AGENDAMENTO  

	inner join TB_CATEGORIA CATEGORIA on CATEGORIA.COD_CATEGORIA = AGENDAMENTO.COD_CATEGORIA 
	
	inner join TB_PERIODO PERIODO on PERIODO.NUM_PERIODO = AGENDAMENTO.NUM_PERIODO 
	
	left join TB_LANCAMENTO LANCAMENTO 
		on LANCAMENTO.COD_AGENDAMENTO = AGENDAMENTO.COD_AGENDAMENTO  
		and date_format(LANCAMENTO.DAT_REFERENCIA,'%Y%m') = date_format(curdate(),'%Y%m')
		and LANCAMENTO.COD_LANCAMENTO = (
			select max(L2.COD_LANCAMENTO) 
			from TB_LANCAMENTO L2 
			where L2.COD_AGENDAMENTO = AGENDAMENTO.COD_AGENDAMENTO 
			and date_format(L2.DAT_REFERENCIA,'%Y%m') = date_format(curdate(),'%Y%m')
		)
		
		left join VW_MEDIA_AGENDAMENTOS VW on VW.COD_AGENDAMENTO = AGENDAMENTO.COD_AGENDAMENTO 
		

where AGENDAMENTO.IND_ATIVO = 1 
and date_format(curdate(),'%Y%m') = date_format((AGENDAMENTO.DAT_INICIO + interval (PERIODO.NUM_PERIODO * round((period_diff(date_format(curdate(),'%Y%m'),date_format(AGENDAMENTO.DAT_INICIO,'%Y%m')) / PERIODO.NUM_PERIODO),0)) month),'%Y%m') 
		
		
		
order by DAT_PREVISTA, DES_CATEGORIA

;


/*--------------------------------------------------------------
| VW_PARCELAS
--------------------------------------------------------------*/
CREATE OR REPLACE VIEW VW_PARCELAS AS 

SELECT LANCAMENTO.COD_USUARIO 
     , PARCELA.COD_PARCELA 
     , PARCELA.DAT_PARCELA AS DAT_PREVISTA
     , PARCELA.VAL_PARCELA AS VAL_PREVISTO
	 , LANCAMENTO_PAGAMENTO.DAT_REFERENCIA AS DAT_PAGAMENTO
     , LANCAMENTO_PAGAMENTO.VAL_LANCAMENTO AS VAL_PAGO
     , timestampdiff(DAY,now(),PARCELA.DAT_PARCELA) AS DIAS
     , convert(concat('Parcela N ', PARCELA.NUM_PARCELA, ' (', CATEGORIA.NOM_CATEGORIA, ')')using latin1) AS DES_CATEGORIA
     , 46 AS COD_CATEGORIA
   
FROM TB_PARCELA PARCELA

	INNER JOIN TB_LANCAMENTO LANCAMENTO ON LANCAMENTO.COD_LANCAMENTO = PARCELA.COD_LANCAMENTO
	
	INNER JOIN TB_CATEGORIA CATEGORIA ON CATEGORIA.COD_CATEGORIA = LANCAMENTO.COD_CATEGORIA
	
	INNER JOIN TB_LANCAMENTO LANCAMENTO_PAGAMENTO ON LANCAMENTO_PAGAMENTO.COD_PARCELA = PARCELA.COD_PARCELA

where isnull(LANCAMENTO.COD_CARTAO_CREDITO)
AND ( date_format(curdate(),'%Y%m') = date_format(PARCELA.DAT_PARCELA,'%Y%m')
		or ((PARCELA.DAT_PARCELA < concat(date_format(curdate(),'%Y-%m'),'-01')) and isnull(LANCAMENTO_PAGAMENTO.DAT_REFERENCIA))
    )
;
 

/*--------------------------------------------------------------
| VW_PARCELAS_SEM_FATURA
--------------------------------------------------------------*/
CREATE OR REPLACE VIEW VW_PARCELAS_SEM_FATURA AS 
SELECT LANCAMENTO.COD_USUARIO 
     , LANCAMENTO.COD_CARTAO_CREDITO 
     , PARCELA.COD_PARCELA 
     , CARTAO_CREDITO.NOM_BANDEIRA 
     , CARTAO_CREDITO.NOM_CARTAO_CREDITO
     , CATEGORIA.NOM_CATEGORIA 
     , PARCELA.DAT_PARCELA 
     , PARCELA.VAL_PARCELA  
   
FROM TB_PARCELA PARCELA

	INNER JOIN TB_LANCAMENTO LANCAMENTO ON LANCAMENTO.COD_LANCAMENTO = PARCELA.COD_LANCAMENTO
	
	INNER JOIN TB_CATEGORIA CATEGORIA ON CATEGORIA.COD_CATEGORIA = LANCAMENTO.COD_CATEGORIA
	
	INNER JOIN TB_CARTAO_CREDITO CARTAO_CREDITO ON CARTAO_CREDITO.COD_CARTAO_CREDITO = LANCAMENTO.COD_CARTAO_CREDITO
	
	LEFT JOIN TB_LANCAMENTO LANCAMENTO_PARCELA ON LANCAMENTO_PARCELA.COD_LANCAMENTO = PARCELA.COD_LANCAMENTO
	
	LEFT JOIN RL_LANCAMENTO_PARCELA RL on RL.COD_PARCELA = PARCELA.COD_PARCELA 
	

WHERE isnull(RL.COD_PARCELA)

;


/*--------------------------------------------------------------
| VW_FATURAS
--------------------------------------------------------------*/
CREATE OR REPLACE VIEW VW_FATURAS AS 

SELECT LANCAMENTO.COD_USUARIO 
     , CARTAO_CREDITO.COD_CARTAO_CREDITO 
     , CARTAO_CREDITO.NOM_BANDEIRA 
     , CARTAO_CREDITO.NOM_CARTAO_CREDITO
     , LANCAMENTO.DAT_FATURA 
     , LANCAMENTO.DAT_REFERENCIA 
     , LANCAMENTO.VAL_PREVISTO 
     , LANCAMENTO.VAL_LANCAMENTO
     , count(PARCELA.COD_PARCELA) AS QTD_PARCELAS
     , sum(PARCELA.VAL_PARCELA) AS VAL_PARCELAS
   
FROM TB_LANCAMENTO LANCAMENTO

	INNER JOIN TB_CATEGORIA CATEGORIA ON CATEGORIA.COD_CATEGORIA = LANCAMENTO.COD_CATEGORIA

	INNER JOIN TB_CARTAO_CREDITO CARTAO_CREDITO ON CARTAO_CREDITO.COD_CARTAO_CREDITO = LANCAMENTO.COD_CARTAO_CREDITO
	
	INNER JOIN RL_LANCAMENTO_PARCELA RL on RL.COD_LANCAMENTO = LANCAMENTO.COD_LANCAMENTO 
	
	INNER JOIN TB_PARCELA PARCELA on PARCELA.COD_PARCELA = RL.COD_PARCELA 
	 
WHERE LANCAMENTO.COD_CATEGORIA = 48

group by   LANCAMENTO.COD_USUARIO 
	     , CARTAO_CREDITO.COD_CARTAO_CREDITO 
	     , CARTAO_CREDITO.NOM_BANDEIRA 
	     , CARTAO_CREDITO.NOM_CARTAO_CREDITO
	     , LANCAMENTO.DAT_FATURA 
	     , LANCAMENTO.DAT_REFERENCIA 
	     , LANCAMENTO.VAL_PREVISTO 
	     , LANCAMENTO.VAL_LANCAMENTO
;


/*--------------------------------------------------------------
| VW_FATURAS_PREVISTAS_REALIZADAS
--------------------------------------------------------------*/
CREATE OR REPLACE VIEW VW_FATURAS_PREVISTAS_REALIZADAS AS 


SELECT FATURAS_DATAS.COD_USUARIO 
     , FATURAS_DATAS.COD_CARTAO_CREDITO 
     , CARTAO_CREDITO.NOM_BANDEIRA 
     , CARTAO_CREDITO.NOM_CARTAO_CREDITO
     , FATURAS_DATAS.DAT_FATURA 
     , FATURAS.DAT_REFERENCIA
     , FATURAS.VAL_LANCAMENTO 
     
     ,round(sum((case when isnull(PARCELAS_SEM_FATURA.VAL_PARCELA) then 0 else PARCELAS_SEM_FATURA.VAL_PARCELA end)),2) AS VAL_PARCELAS_PENDENTES
     ,count(PARCELAS_SEM_FATURA.COD_PARCELA) AS QTD_PARCELAS_PENDENTES
   
   
FROM VW_FATURAS_DATAS FATURAS_DATAS 

	INNER JOIN TB_CARTAO_CREDITO CARTAO_CREDITO ON CARTAO_CREDITO.COD_CARTAO_CREDITO = FATURAS_DATAS.COD_CARTAO_CREDITO
	
	LEFT JOIN VW_PARCELAS_SEM_FATURA PARCELAS_SEM_FATURA 
		ON  PARCELAS_SEM_FATURA.COD_CARTAO_CREDITO = FATURAS_DATAS.COD_CARTAO_CREDITO
		AND PARCELAS_SEM_FATURA.DAT_PARCELA        = FATURAS_DATAS.DAT_FATURA 
	
	LEFT JOIN VW_FATURAS FATURAS
		ON  FATURAS.COD_CARTAO_CREDITO = FATURAS_DATAS.COD_CARTAO_CREDITO
		AND FATURAS.DAT_FATURA         = FATURAS_DATAS.DAT_FATURA
	
group by   FATURAS_DATAS.COD_USUARIO 
	     , FATURAS_DATAS.COD_CARTAO_CREDITO 
	     , CARTAO_CREDITO.NOM_BANDEIRA 
	     , CARTAO_CREDITO.NOM_CARTAO_CREDITO
	     , FATURAS_DATAS.DAT_FATURA 
	     , FATURAS.DAT_REFERENCIA
	     , FATURAS.VAL_LANCAMENTO

order by FATURAS_DATAS.DAT_FATURA, FATURAS_DATAS.COD_CARTAO_CREDITO

;


/*--------------------------------------------------------------
| VW_PROXIMAS_ATIVIDADES
--------------------------------------------------------------*/
 
CREATE OR REPLACE VIEW VW_PROXIMAS_ATIVIDADES AS 

SELECT COD_USUARIO 
     , DAT_PREVISTA 
     , COD_AGENDAMENTO 
     , NULL AS COD_PARCELA
     , NULL AS COD_CARTAO_CREDITO
     , NOM_AGENDAMENTO AS NOME
     , COD_CATEGORIA 
     , DES_CATEGORIA 
     , VAL_PREVISTO 
     , DAT_PAGAMENTO 
     , VAL_PAGO 
     , DIAS 
FROM VW_AGENDAMENTOS 
where isnull(DAT_PAGAMENTO) 

union all 

select  COD_USUARIO 
      , DAT_PREVISTA 
      , NULL AS COD_AGENDAMENTO
      , COD_PARCELA 
      , NULL AS COD_CARTAO_CREDITO
      , NULL AS NOME 
      , COD_CATEGORIA 
      , DES_CATEGORIA 
      , VAL_PREVISTO 
      , DAT_PAGAMENTO 
      , VAL_PAGO 
      , DIAS 
from VW_PARCELAS 
where isnull(DAT_PAGAMENTO)  

union all 

select FATURAS.COD_USUARIO 
      ,FATURAS.DAT_FATURA 
      ,NULL AS COD_AGENDAMENTO
      ,NULL AS COD_PARCELA
      ,FATURAS.COD_CARTAO_CREDITO 
      ,concat(FATURAS.NOM_BANDEIRA,' - ', FATURAS.NOM_CARTAO_CREDITO) AS NOME
      ,CATEGORIA.COD_CATEGORIA 
      
      ,concat(CATEGORIA.NOM_CATEGORIA, '(', FATURAS.NOM_BANDEIRA, ' - ', FATURAS.NOM_CARTAO_CREDITO, ')') AS DES_CATEGORIA
      
      ,FATURAS.VAL_PARCELAS_PENDENTES AS VAL_PREVISTO
      ,FATURAS.DAT_REFERENCIA AS DAT_PAGAMENTO
      ,FATURAS.VAL_LANCAMENTO AS VAL_PAGO
      ,timestampdiff(DAY,now(),FATURAS.DAT_FATURA) AS DIAS 
      
      
FROM VW_FATURAS_PREVISTAS_REALIZADAS FATURAS

	INNER JOIN TB_CATEGORIA CATEGORIA ON CATEGORIA.COD_CATEGORIA = 48
	
	
WHERE isnull(FATURAS.DAT_REFERENCIA) 
and (
  date_format(curdate(),'%Y%m') = date_format(FATURAS.DAT_FATURA,'%Y%m')
  or (
     FATURAS.DAT_FATURA < concat(date_format(curdate(),'%Y-%m'),'-01') and isnull(FATURAS.DAT_REFERENCIA)
  )
) 
and FATURAS.QTD_PARCELAS_PENDENTES > 0


order by DAT_PREVISTA,DES_CATEGORIA

;



/*--------------------------------------------------------------
| VW_LANCAMENTOS
--------------------------------------------------------------*/
 
CREATE OR REPLACE VIEW VW_LANCAMENTOS AS 


SELECT COD_USUARIO 
     , 'Agendamentos' AS DES_LANCAMENTOS
     , 1 AS COD_TIPO
     , sum((case when isnull(VAL_PREVISTO) then 0 else VAL_PREVISTO end)) AS VAL_PREVISTO
     , sum((case when isnull(VAL_PAGO) then 0 else VAL_PAGO end)) AS VAL_PAGO
FROM VW_AGENDAMENTOS 
where (date_format(curdate(),'%Y%m') = date_format(DAT_PREVISTA,'%Y%m')) 
group by COD_USUARIO 

union all 

select COD_USUARIO
    , 'Parcelas' AS DES_LANCAMENTOS
    , 2 AS COD_TIPO
    , sum((case when isnull(VAL_PREVISTO) then 0 else VAL_PREVISTO end)) AS VAL_PREVISTO
    , sum(VAL_PAGO) AS VAL_PAGO 
from VW_PARCELAS 
where (date_format(curdate(),'%Y%m') = date_format(DAT_PREVISTA,'%Y%m')) 
group by COD_USUARIO 

union all 

select LANCAMENTO.COD_USUARIO
     , 'Despesas Gerais' AS DES_LANCAMENTOS
     , 3 AS COD_TIPO
     , sum((case when isnull(LANCAMENTO.VAL_PREVISTO) then 0 else LANCAMENTO.VAL_PREVISTO end)) AS VAL_PREVISTO
     , sum(LANCAMENTO.VAL_LANCAMENTO) AS VAL_PAGO 
from TB_LANCAMENTO LANCAMENTO

	INNER JOIN TB_CATEGORIA CATEGORIA ON CATEGORIA.COD_CATEGORIA = LANCAMENTO.COD_CATEGORIA
	
where isnull(LANCAMENTO.COD_AGENDAMENTO) 
and isnull(LANCAMENTO.COD_PARCELA) 
AND CATEGORIA.COD_GRUPO <> 9
and CATEGORIA.COD_CATEGORIA <> 48
and (date_format(curdate(),'%Y%m') = date_format(LANCAMENTO.DAT_REFERENCIA,'%Y%m')) 
group by LANCAMENTO.COD_USUARIO 

union all 

select LANCAMENTO.COD_USUARIO
     , 'Receitas' AS DES_LANCAMENTOS
     , 4 AS COD_TIPO
     , sum((case when isnull(LANCAMENTO.VAL_PREVISTO) then 0 else LANCAMENTO.VAL_PREVISTO end)) AS VAL_PREVISTO
     , sum(LANCAMENTO.VAL_LANCAMENTO) AS VAL_PAGO 
     
from TB_LANCAMENTO LANCAMENTO

	INNER JOIN TB_CATEGORIA CATEGORIA ON CATEGORIA.COD_CATEGORIA = LANCAMENTO.COD_CATEGORIA
	
where isnull(LANCAMENTO.COD_AGENDAMENTO) 
and isnull(LANCAMENTO.COD_PARCELA) 
AND CATEGORIA.COD_GRUPO = 9
and (date_format(curdate(),'%Y%m') = date_format(LANCAMENTO.DAT_REFERENCIA,'%Y%m')) 
group by LANCAMENTO.COD_USUARIO 

union all 

select LANCAMENTO.COD_USUARIO
     , 'Faturas' AS DES_LANCAMENTOS
     , 5 AS COD_TIPO
     , sum((case when isnull(LANCAMENTO.VAL_PREVISTO) then 0 else LANCAMENTO.VAL_PREVISTO end)) AS VAL_PREVISTO
     , sum(LANCAMENTO.VAL_LANCAMENTO) AS VAL_PAGO 
from TB_LANCAMENTO LANCAMENTO 

where isnull(LANCAMENTO.COD_AGENDAMENTO) 
and isnull(LANCAMENTO.COD_PARCELA) 
and (LANCAMENTO.COD_CARTAO_CREDITO is not null) 
and (LANCAMENTO.COD_CATEGORIA = 48) 
and date_format(curdate(),'%Y%m') = date_format(LANCAMENTO.DAT_REFERENCIA,'%Y%m')

group by LANCAMENTO.COD_USUARIO




/*--------------------------------------------------------------
| VW_RESUMO_MES
--------------------------------------------------------------*/
 
CREATE OR REPLACE VIEW VW_RESUMO_MES AS 

SELECT COD_USUARIO 
     , DES_LANCAMENTOS 
     , COD_TIPO
     , (case when isnull(VAL_PREVISTO) then 0 else VAL_PREVISTO end) AS VAL_PREVISTO
     , (case when isnull(VAL_PAGO) then 0 else VAL_PAGO end) AS VAL_PAGO
FROM VW_LANCAMENTOS
;

/*--------------------------------------------------------------
| VW_DESPESAS_RECEITAS
--------------------------------------------------------------*/
 
CREATE OR REPLACE VIEW VW_DESPESAS_RECEITAS AS 

SELECT LANCAMENTO.COD_USUARIO 
     , cast(date_format(LANCAMENTO.DAT_REFERENCIA,'%Y-%m-01') as date) AS DAT_COMPETENCIA
     , round(sum(LANCAMENTO.VAL_PREVISTO),2) AS VAL_DESPESA_PREVISTA
     , round(sum(LANCAMENTO.VAL_LANCAMENTO),2) AS VAL_DESPESA_PAGA
     , 0 AS VAL_RECEITA_PREVISTA
     , 0 AS VAL_RECEITA_PAGA
FROM TB_LANCAMENTO LANCAMENTO 

	INNER JOIN TB_CATEGORIA CATEGORIA ON CATEGORIA.COD_CATEGORIA = LANCAMENTO.COD_CATEGORIA
	
where CATEGORIA.COD_GRUPO <> 9
and (LANCAMENTO.DAT_REFERENCIA between cast(date_format((curdate() + interval -(12) month),'%Y-%m-01') as date) and cast(date_format(curdate(),'%Y-%m-01') as date))
group by LANCAMENTO.COD_USUARIO,cast(date_format(LANCAMENTO.DAT_REFERENCIA,'%Y-%m-01') as date) 

union all 

select LANCAMENTO.COD_USUARIO 
     , cast(date_format(LANCAMENTO.DAT_REFERENCIA,'%Y-%m-01') as date) AS DAT_COMPETENCIA
     , 0 AS VAL_DESPESA_PREVISTA
     , 0 AS VAL_DESPESA_PAGA
     , round(sum(LANCAMENTO.VAL_PREVISTO),2) AS VAL_RECEITA_PREVISTA
     , round(sum(LANCAMENTO.VAL_LANCAMENTO),2) AS VAL_RECEITA_PAGA 
FROM TB_LANCAMENTO LANCAMENTO 

	INNER JOIN TB_CATEGORIA CATEGORIA ON CATEGORIA.COD_CATEGORIA = LANCAMENTO.COD_CATEGORIA
	
where CATEGORIA.COD_GRUPO = 9

and (LANCAMENTO.DAT_REFERENCIA between cast(date_format((curdate() + interval -(12) month),'%Y-%m-01') as date) and cast(date_format(curdate(),'%Y-%m-01') as date)) 

group by LANCAMENTO.COD_USUARIO,cast(date_format(LANCAMENTO.DAT_REFERENCIA,'%Y-%m-01') as date)

;

/*--------------------------------------------------------------
| VW_AGENDA_ATUAL
--------------------------------------------------------------*/
 
CREATE OR REPLACE VIEW VW_AGENDA_ATUAL AS 
SELECT COD_USUARIO 
     , DAT_PREVISTA 
     , COD_AGENDAMENTO 
     , NULL AS COD_PARCELA
     , NULL AS COD_CARTAO_CREDITO
     , COD_CATEGORIA 
     , DES_CATEGORIA 
     , VAL_PREVISTO 
     , DAT_PAGAMENTO 
     , VAL_PAGO 
FROM VW_AGENDAMENTOS 

union all 

select COD_USUARIO 
     , DAT_PREVISTA 
     , NULL AS COD_AGENDAMENTO
     , COD_PARCELA 
     , NULL AS COD_CARTAO_CREDITO
     , COD_CATEGORIA 
     , DES_CATEGORIA 
     , VAL_PREVISTO 
     , DAT_PAGAMENTO 
     , VAL_PAGO 
from VW_PARCELAS 

union all 

select FATURAS.COD_USUARIO 
     , FATURAS.DAT_FATURA AS DAT_PREVISTA
     , NULL AS COD_AGENDAMENTO
     , NULL AS COD_PARCELA
     , FATURAS.COD_CARTAO_CREDITO 
      ,CATEGORIA.COD_CATEGORIA 
      ,concat(CATEGORIA.NOM_CATEGORIA, '(', FATURAS.NOM_BANDEIRA, ' - ', FATURAS.NOM_CARTAO_CREDITO, ')') AS DES_CATEGORIA
     , FATURAS.VAL_PARCELAS_PENDENTES AS VAL_PREVISTO
     , FATURAS.DAT_REFERENCIA AS DAT_PAGAMENTO
     , FATURAS.VAL_LANCAMENTO AS VAL_PAGO 
     
from VW_FATURAS_PREVISTAS_REALIZADAS FATURAS
	
INNER JOIN TB_CATEGORIA CATEGORIA ON CATEGORIA.COD_CATEGORIA = CATEGORIA.COD_CATEGORIA = 48
	

where (date_format(curdate(),'%Y%m') = date_format(FATURAS.DAT_FATURA,'%Y%m')) 
	or ((FATURAS.DAT_FATURA < concat(date_format(curdate(),'%Y-%m'),'-01')) and isnull(FATURAS.DAT_REFERENCIA))

order by DAT_PREVISTA,DES_CATEGORIA;



/*--------------------------------------------------------------
| VW_RELACAO_LANCAMENTO
--------------------------------------------------------------*/
 
CREATE OR REPLACE VIEW VW_RELACAO_LANCAMENTO AS 

SELECT LANCAMENTO.COD_USUARIO 
     , LANCAMENTO.COD_LANCAMENTO 
     , PARCELA.COD_LANCAMENTO AS COD_LANCAMENTO_PARCELA
     , date_format(LANCAMENTO.DAT_LANCAMENTO,'%Y%m') AS ANO_MES
     
     , (CASE WHEN LANCAMENTO.COD_AGENDAMENTO IS NOT NULL THEN 1                  -- 1 Pagamentos Agendados
	         WHEN LANCAMENTO.COD_PARCELA     IS NOT NULL THEN 2                  -- 2 Parcelas
	         WHEN GRUPO.COD_GRUPO <> 9 AND LANCAMENTO.COD_CATEGORIA <> 48 THEN 3 -- 3 Despesas Gerais
	         WHEN GRUPO.COD_GRUPO = 9 THEN 4                                     -- 4 Receitas
	         WHEN LANCAMENTO.COD_CATEGORIA = 48 THEN 5                           -- 5 Faturas
	         ELSE 3 end                                                          -- 3 Despesas Gerais
        ) AS COD_TIPO
         
     , case when (LANCAMENTO.COD_PARCELA is not null) 
     			then CATEGORIA_PARCELA.NOM_CATEGORIA 
            when (LANCAMENTO.COD_CARTAO_CREDITO is not null) 
            	then concat(CATEGORIA.NOM_CATEGORIA, ' (', CARTAO_CREDITO.NOM_BANDEIRA, ' - ', CARTAO_CREDITO.NOM_CARTAO_CREDITO, ')') 
            else CATEGORIA.NOM_CATEGORIA 
       end AS DES_CATEGORIA
     , PARCELA.NUM_PARCELA 
     , AGENDAMENTO.NOM_AGENDAMENTO 
     , date_format(LANCAMENTO.DAT_LANCAMENTO,'%d/%m/%Y %H:%i') AS DAT_LANCAMENTO
     , date_format(LANCAMENTO.DAT_REFERENCIA,'%d/%m/%Y') AS DAT_REFERENCIA
     , LANCAMENTO.VAL_PREVISTO 
     , (case when isnull(LANCAMENTO.COD_CARTAO_CREDITO) then LANCAMENTO.VAL_LANCAMENTO else LANCAMENTO.VAL_PREVISTO end) AS VAL_PAGO
   
   
FROM TB_LANCAMENTO LANCAMENTO 

	INNER JOIN TB_CATEGORIA CATEGORIA ON CATEGORIA.COD_CATEGORIA = LANCAMENTO.COD_CATEGORIA
	
	INNER JOIN TB_GRUPO GRUPO ON GRUPO.COD_GRUPO = CATEGORIA.COD_GRUPO
	
	LEFT JOIN TB_AGENDAMENTO AGENDAMENTO ON AGENDAMENTO.COD_AGENDAMENTO = LANCAMENTO.COD_AGENDAMENTO
	
	LEFT JOIN TB_PARCELA PARCELA ON PARCELA.COD_PARCELA = LANCAMENTO.COD_PARCELA
	
	LEFT JOIN TB_LANCAMENTO LANCAMENTO_PARCELA ON LANCAMENTO_PARCELA.COD_LANCAMENTO = PARCELA.COD_LANCAMENTO
	
	LEFT JOIN TB_CATEGORIA CATEGORIA_PARCELA ON CATEGORIA_PARCELA.COD_CATEGORIA = LANCAMENTO_PARCELA.COD_CATEGORIA
	
	LEFT JOIN TB_GRUPO GRUPO_PARCELA ON GRUPO_PARCELA.COD_GRUPO = CATEGORIA_PARCELA.COD_GRUPO
	
	LEFT JOIN TB_CARTAO_CREDITO CARTAO_CREDITO ON CARTAO_CREDITO.COD_CARTAO_CREDITO = LANCAMENTO.COD_CARTAO_CREDITO
	
	 



order by LANCAMENTO.DAT_REFERENCIA, DES_CATEGORIA, LANCAMENTO.COD_LANCAMENTO;

/*--------------------------------------------------------------
|  
--------------------------------------------------------------*/
select *
from CATEGORIA
where COD_CATEGORIA  in (72,50,51,67,68,69,70,71)
where COD_CATEGORIA  in (50,51,67,68,69,70,71,72,76)
/*--------------------------------------------------------------
| CARGA
--------------------------------------------------------------*/

INSERT INTO TB_CONFIGURACAO(NOM_CONFIGURACAO, DES_CONFIGURACAO) VALUES('url.autenticacao', 'http://localhost:8080/quaemo-autenticacao/api');
INSERT INTO TB_CONFIGURACAO(NOM_CONFIGURACAO, DES_CONFIGURACAO) VALUES('url.sistema', 'http://localhost:8080/quaemo-corporativo/api/corporativo/sistemas');
INSERT INTO TB_CONFIGURACAO(NOM_CONFIGURACAO, DES_CONFIGURACAO) VALUES('url.sistema.aplicacao.cliente', 'http://localhost:8080/quaemo-corporativo/api/corporativo/sistemas/{codSistema}/aplicacao-cliente');
INSERT INTO TB_CONFIGURACAO(NOM_CONFIGURACAO, DES_CONFIGURACAO) VALUES('url.sistema.perfil', 'http://localhost:8080/quaemo-corporativo/api/corporativo/sistemas/{codSistema}/perfis');
INSERT INTO TB_CONFIGURACAO(NOM_CONFIGURACAO, DES_CONFIGURACAO) VALUES('url.sistema.recurso', 'http://localhost:8080/quaemo-corporativo/api/corporativo/sistemas/{codSistema}/recursos');
INSERT INTO TB_CONFIGURACAO(NOM_CONFIGURACAO, DES_CONFIGURACAO) VALUES('url.sistema.usuario', 'http://localhost:8080/quaemo-corporativo/api/corporativo/sistemas/{codSistema}/usuarios');
INSERT INTO TB_CONFIGURACAO(NOM_CONFIGURACAO, DES_CONFIGURACAO) VALUES('url.sistema.usuario.menu', 'http://localhost:8080/quaemo-corporativo/api/corporativo/sistemas/{codSistema}/usuarios/menus');
INSERT INTO TB_CONFIGURACAO(NOM_CONFIGURACAO, DES_CONFIGURACAO) VALUES('url.sistema.usuario.status', 'http://localhost:8080/quaemo-corporativo/api/corporativo/sistemas/{codSistema}/usuarios/{codUsuario}/status');
INSERT INTO TB_CONFIGURACAO(NOM_CONFIGURACAO, DES_CONFIGURACAO) VALUES('url.usuario', 'http://localhost:8080/quaemo-corporativo/api/corporativo/usuarios/');
INSERT INTO TB_CONFIGURACAO(NOM_CONFIGURACAO, DES_CONFIGURACAO) VALUES('url.usuario.foto', 'http://localhost:8080/quaemo-corporativo/api/corporativo/usuarios/{codUsuario}/fotos');
INSERT INTO TB_CONFIGURACAO(NOM_CONFIGURACAO, DES_CONFIGURACAO) VALUES('url.usuario.login', 'http://localhost:8080/quaemo-corporativo/api/corporativo/usuarios/{login}');
INSERT INTO TB_CONFIGURACAO(NOM_CONFIGURACAO, DES_CONFIGURACAO) VALUES('url.usuario.senha', 'http://localhost:8080/quaemo-corporativo/api/corporativo/usuarios/{login}/senha');

INSERT INTO TB_GRUPO (COD_GRUPO, NOM_GRUPO)


SELECT CONCAT('INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES (',COD_CATEGORIA,', ''', NOM_CATEGORIA, ''');') AS DADOS
FROM CATEGORIA
WHERE COD_CATEGORIA_PAI IS NULL;


INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES( 1, 'Moradia');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES( 2, 'Despesas');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES( 3, 'Transporte');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES( 4, 'Saúde e Cuidados');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES( 5, 'Educação');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES( 6, 'Lazer');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES( 7, 'Obrigações Financeiras');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES( 8, 'Compras Diversas');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES( 9, 'Receitas');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES(10, 'Dependentes');



INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES (1, 'Moradia');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES (2, 'Alimentação');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES (3, 'Transporte');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES (4, 'Saúde e Cuidados');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES (5, 'Educação');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES (6, 'Lazer');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES (7, 'Despesas Financeiras');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES (8, 'Compras Diversas');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES (49, 'Receitas');
INSERT INTO TB_GRUPO(COD_GRUPO, NOM_GRUPO) VALUES (53, 'Dependentes');


SELECT CONCAT('INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES ( ', ', ', (case when COD_CATEGORIA_PAI = 49 then 9 when COD_CATEGORIA_PAI = 53 then 10 else COD_CATEGORIA_PAI end),', ''', NOM_CATEGORIA, ''');') AS DADOS
FROM CATEGORIA
WHERE COD_CATEGORIA_PAI > 0
order by COD_CATEGORIA_PAI,COD_CATEGORIA;


INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES ( 1, 1, 'Aluguel');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES ( 2, 1, 'Condomínio');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES ( 3, 1, 'Água');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES ( 4, 1, 'Energia Elétrica');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES ( 5, 1, 'Gás');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES ( 6, 1, 'Telefone');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES ( 7, 1, 'Internet');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES ( 8, 1, 'TV a Cabo');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES ( 9, 1, 'Manutenção');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (10, 1, 'Impostos e Taxas');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (11, 1, 'Seguro');

INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (12, 2, 'Supermercado');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (13, 2, 'Açougue');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (14, 2, 'Padaria');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (15, 2, 'Feira');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (16, 2, 'Restaurantes');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (17, 2, 'Outros');

INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (18, 3, 'Combustível');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (19, 3, 'Transporte Escolar');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (20, 3, 'Manutenção');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (21, 3, 'Impostos e Taxas');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (22, 3, 'Seguro');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (23, 3, 'Lavagens');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (24, 3, 'MULTAS');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (25, 3, 'Outros');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (26, 3, 'Estacionamentos');

INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (27, 4, 'Plano de Saúde');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (28, 4, 'Farmácia');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (29, 4, 'Consultas sem Plano de Saúde');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (30, 4, 'Outros');

INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (31, 5, 'Escola');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (32, 5, 'Faculdade');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (33, 5, 'Curso');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (34, 5, 'Material Escolar');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (35, 5, 'Livros');

INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (36, 6, 'Academia');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (37, 6, 'Jornais e Revistas');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (38, 6, 'Cinema e Passeios');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (39, 6, 'Viagens');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (40, 6, 'Shows e Eventos');

INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (41, 7, 'Pagamento de Serviços');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (42, 7, 'Aplicação em fundos');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (43, 7, 'PGBL');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (44, 7, 'Poupança');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (45, 7, 'Cartões de Crédito');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (46, 7, 'Pagamento de Parcela');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (47, 7, 'Financiamento');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (48, 7, 'Pagamento de Fatura');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (49, 7, 'Pagamento de Serviços');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (50, 7, 'Quitação');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (51, 7, 'Empréstimo');

INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (52, 8, 'Vestuário');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (53, 8, 'Outros');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (54, 8, 'Informática e Games');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (55, 8, 'Eletro Eletrônico');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (56, 8, 'Ferramentas');

INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (57, 9, 'Salário');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (58, 9, 'Bolsas');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (59, 9, '13º Salário');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (60, 9, 'Férias');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (61, 9, 'Retirada de Poupança');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (62, 9, 'Retirada de Aplicações');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (63, 9, 'Empréstimos');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (64, 9, 'Outros');

INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (65, 10, 'Escola/Faculdade');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (66, 10, 'Cursos');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (67, 10, 'Material Escolar');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (68, 10, 'Esportes/Uniformes');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (69, 10, 'Mesada');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (70, 10, 'Passeios/Férias');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (71, 10, 'Vestuário');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (72, 10, 'Saúde/Medicamentos');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (73, 10, 'Outros');
INSERT INTO TB_CATEGORIA(COD_CATEGORIA, COD_GRUPO, NOM_CATEGORIA) VALUES (74, 10, 'Pensão Alimentícia');




 
INSERT INTO TB_PERIODO(NUM_PERIODO, NOM_PERIODO) VALUES( 1, 'Moradia');

SELECT CONCAT('INSERT INTO TB_PERIODO(NUM_PERIODO, NOM_PERIODO) VALUES (',NUM_PERIODO,', ''', NOM_PERIODO, ''');') AS DADOS
FROM PERIODO;

INSERT INTO TB_PERIODO(NUM_PERIODO, NOM_PERIODO) VALUES ( 1, 'Mensal');
INSERT INTO TB_PERIODO(NUM_PERIODO, NOM_PERIODO) VALUES ( 2, 'Bimestral');
INSERT INTO TB_PERIODO(NUM_PERIODO, NOM_PERIODO) VALUES ( 3, 'Trimestral');
INSERT INTO TB_PERIODO(NUM_PERIODO, NOM_PERIODO) VALUES ( 6, 'Semestral');
INSERT INTO TB_PERIODO(NUM_PERIODO, NOM_PERIODO) VALUES (12, 'Anual');


